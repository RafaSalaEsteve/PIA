{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenidos al Curso de Especializaci\u00f3n en Big Data e Inteligencia Artificial","text":"<p>En esta p\u00e1gina encontrar\u00e1s los materiales estructurados por bloques tem\u00e1ticos.</p> <ul> <li>Gu\u00eda general</li> <li>Unitat 1. Introducci\u00f3 a la Programaci\u00f3</li> </ul>"},{"location":"Unitat_1.Introduccio_a_la_Programacio/exercicis/","title":"2. Exercici pr\u00e0ctic","text":""},{"location":"Unitat_1.Introduccio_a_la_Programacio/exercicis/#1-proves-de-rendiment","title":"1. Proves de rendiment","text":"<p>En aquesta pr\u00e0ctica anem a fer una prova de rendiment de 3 llenguatges de programaci\u00f3: C, Python i Python amb numpy.</p> <p>Els programes fan la multiplicaci\u00f3 de dues matrius de 2048x2048 elements, amb un total de 8.589.934.592 operacions.</p> <p>Per a la realitzaci\u00f3 del exercici necessitar\u00e0s:</p> <ul> <li>Tenir instal\u00b7lat el compilador de C (per defecte a Ubuntu)</li> <li>Tenir instal\u00b7lat un JDK</li> <li>Tenir instal\u00b7lat Python i la llibreria <code>numpy</code></li> </ul> Codi en C matrix.c<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;time.h&gt;\n\n#define n 2048\n\ndouble A[n][n];\ndouble B[n][n];\ndouble C[n][n];\n\nint main() {\n\n    //populate the matrices with random values between 0.0 and 1.0\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n\n            A[i][j] = (double) rand() / (double) RAND_MAX;\n            B[i][j] = (double) rand() / (double) RAND_MAX;\n            C[i][j] = 0;\n        }\n    }\n\n    struct timespec start, end;\n    double time_spent;\n\n    //matrix multiplication\n    clock_gettime(CLOCK_REALTIME, &amp;start);\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            for (int k = 0; k &lt; n; k++) {\n                C[i][j] += A[i][k] * B[k][j];\n            }\n        }\n    }\n    clock_gettime(CLOCK_REALTIME, &amp;end);\n    time_spent = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1000000000.0;\n    printf(\"Elapsed time in seconds: %f \\n\", time_spent);\n    return 0;\n}\n</code></pre> Codi en Python matrix.py<pre><code>import random\nimport time\n\nn = 2048\n\n#populate the matrices with random values between 0.0 and 1.0\nA = [[random.random() for row in range(n)] for col in range(n)]\nB = [[random.random() for row in range(n)] for col in range(n)]\nC = [[0 for row in range(n)] for col in range(n)]\n\nstart = time.time()\n#matrix multiplication\nfor i in range(n):\n    for j in range(n):\n        for k in range(n):\n            C[i][j] += A[i][k] * B[k][j]\n\nend = time.time()\nprint(\"Elapsed time in seconds %0.6f\" % (end-start))\n</code></pre> Codi en Java Matrix.java<pre><code>import random\nimport time\n\nn = 2048\n\n#populate the matrices with random values between 0.0 and 1.0\nA = [[random.random() for row in range(n)] for col in range(n)]\nB = [[random.random() for row in range(n)] for col in range(n)]\nC = [[0 for row in range(n)] for col in range(n)]\n\nstart = time.time()\n#matrix multiplication\nfor i in range(n):\n    for j in range(n):\n        for k in range(n):\n            C[i][j] += A[i][k] * B[k][j]\n\nend = time.time()\nprint(\"Elapsed time in seconds %0.6f\" % (end-start))\n</code></pre>"},{"location":"Unitat_1.Introduccio_a_la_Programacio/exercicis/#2-compilacio-i-llancament-dels-programes","title":"2. Compilaci\u00f3 i llan\u00e7ament dels programes","text":"<ol> <li>Compilar cada programa (si cal).</li> <li>Executar 5 vegades cada programa.</li> <li>Anotar els temps en un full de c\u00e0lcul.</li> </ol>"},{"location":"Unitat_1.Introduccio_a_la_Programacio/exercicis/#ordres-basiques","title":"Ordres b\u00e0siques:","text":"Compilaci\u00f3 i execuci\u00f3 dels programes Bash<pre><code>#C\ngcc MatrixMultiplication.c -o matrix\n./matrix\n#Java\njavac MatrixMultiplication.java\njava MatrixMultiplication\n#Python\npython MatrixMultiplication.py\n</code></pre> <p>Anota els resultats i compara'ls. Torna a compilar els programes C de la seg\u00fcent forma:</p> Compilaci\u00f3 optimitzada en C bash<pre><code>gcc -O2 MatrixMultiplication.c -o matrixO2\n./matrix02\ngcc -O3 MatrixMultiplication.c -o matrixO2\n./matrix03\n</code></pre>"},{"location":"Unitat_1.Introduccio_a_la_Programacio/exercicis/#3-llibreria-dalt-rendiment-numpy","title":"3. Llibreria d'alt rendiment: <code>numpy</code>","text":"<p>Torna a fer la prova amb el seg\u00fcent programa:</p> Python amb numpy matrixnp.py<pre><code>import numpy as np\nimport time\n\n\nTAM=2048\n\n#matriu = [[np.random.rand() for j in range(TAM)] for i in range(TAM)]\n\nm1 = np.random.rand(TAM,TAM)\nm2 = np.random.rand(TAM,TAM)\ndesti = np.zeros((TAM,TAM),dtype=float)\n\nstart = time.time()\nnova=np.dot(m1,m2)\nend = time.time()\nprint(\"Amb np: Elapsed time in seconds %0.6f\" % (end-start))\n\n\nstart = time.time()\n#matrix multiplication\nfor i in range(TAM):\n    for j in range(TAM):\n        for k in range(TAM):\n            desti[i][j] += m1[i][k] * m2[k][j]\nend = time.time()\nprint(\"Sense np: Elapsed time in seconds %0.6f\" % (end-start))\n</code></pre>"},{"location":"Unitat_1.Introduccio_a_la_Programacio/teoria1_algorismes_i_llenguatges/","title":"1. Algorismes i llenguatges","text":"<p>Per a comen\u00e7ar amb aquest curs, cal repassar algunes consideracions molt b\u00e0siques (i molt r\u00e0pidament) de conceptes que tenim que tindre molt clars.</p>"},{"location":"Unitat_1.Introduccio_a_la_Programacio/teoria1_algorismes_i_llenguatges/#11-programa-i-programacio","title":"1.1 Programa i programaci\u00f3","text":"<p>Definicions b\u00e0siques</p> <ul> <li>El client \u00e9s qui diu les seues necessitats.</li> <li>Un analista \u00e9s aquella persona que s'encarrega de especificar qu\u00e9 ha de fer el programa, a partir del requisits que li ha dit el client.</li> <li>Un dissenyador \u00e9s aquell que perfila l'algorisme a seguir per a solucionar els requeriments del client.</li> <li>Un programador/a \u00e9s aquella persona que s'encarrega de codificar programes, segons l'algorisme dissenyat.</li> <li>Usuari/a \u00e9s el terme que s\u2019utilitza per referir-se a la persona que fa servir una aplicaci\u00f3 inform\u00e0tica amb la intenci\u00f3 d\u2019aconseguir un resultat final. La persona que treballar\u00e0 amb el programa final.</li> </ul> <p>Tenint tots els rols clars:</p> <p>M\u00e9s definicions</p> <ul> <li>Un algorisme \u00e9s un m\u00e8tode de resoluci\u00f3 d\u2019un problema en un nombre finit de passos. Exemple: com es fa una truita a la francesa?</li> <li>A partir de l'algorisme un programa \u00e9s l\u2019expressi\u00f3 d\u2019un algorisme en un llenguatge entenedor per l\u2019ordinador. </li> <li>La programaci\u00f3 \u00e9s la seq\u00fc\u00e8ncia de passos que ha d\u2019efectuar el/la programador/a per obtenir un programa.</li> <li>Una aplicaci\u00f3 inform\u00e0tica \u00e9s un conjunt de programes enlla\u00e7ats de manera convenient, per exemple un client i un servidor.</li> <li>Els programes manipulen dades d'entrada per produir altres de sortida.</li> </ul> <p></p> <p>Podeu ampliar la informaci\u00f3 a la seg\u00fcent infografia: Infografia sobre algoritmes</p>"},{"location":"Unitat_1.Introduccio_a_la_Programacio/teoria1_algorismes_i_llenguatges/#12-algorisme-vs-programa","title":"1.2 Algorisme vs Programa","text":"<p>Hem parlat que necessitem un algorisme per a resoldre un problema, pero a m\u00e9s a m\u00e9s el volem resoldre amb un llenguatge de programaci\u00f3. El problema \u00e9s que el llenguatge de programaci\u00f3 sol ser una s\u00e8rie d'instruccions m\u00e9s o menys entendibles pel programador, i aix\u00f2 no ho enten el processador sobre el que s'executa el programa. Es necessita un proc\u00e9s de traducci\u00f3 entre el llenguatge de programaci\u00f3 (text) i el llenguante m\u00e0quina (emmetxador o binari directament) que \u00e9s el que enten el processador.</p> <p>Atesos a la proximitat del processador, distinguim entre:</p> <p></p>"},{"location":"Unitat_1.Introduccio_a_la_Programacio/teoria1_algorismes_i_llenguatges/#121-llenguatge-compilat","title":"1.2.1 Llenguatge compilat","text":"<p>Els llenguatges compilats s\u00f3n aquells que es realitza una traducci\u00f3 total de les instruccions que formen el programa.</p> <p></p> <p>Els grans exemples de llenguatges compilats s\u00f3n C i C++. En dits llenguatges a partir del codi font (fitxer de text) es crea el fitxer executable, que ja pot llan\u00e7ar-se de manera independent.</p> <p>Aquest llenguatges no son portables, ja que sols funcionen en la m\u00e0quina a la qual es compila. Necessitem compiladors d'aquest llenguatges per a diverses m\u00e0quines i sistemes operatius.</p>"},{"location":"Unitat_1.Introduccio_a_la_Programacio/teoria1_algorismes_i_llenguatges/#122-llenguatge-interpretat","title":"1.2.2 Llenguatge interpretat","text":"<p>Els llenguatges interpretats realitzen traduccions parcials de cada linia o bloc de codi font i van execunat-lo poc a poc (traduisc-execute i anem repetint). Aquest llenguatges requereixen un int\u00e8rpret que \u00e9s qui fa eixa execuci\u00f3. El gran representant d'aquest llenguatge \u00e9s Python.</p> <p></p> <p>S\u00f3n molt portables,  ja que aquest codi permet ser executat per qualssevol m\u00e0quina, sempre que tinga l'int\u00e8rpret instal\u00b7lat al seu sistema.</p>"},{"location":"Unitat_1.Introduccio_a_la_Programacio/teoria1_algorismes_i_llenguatges/#123-llenguatges-mixtes","title":"1.2.3 Llenguatges mixtes","text":"<p>Hi han llenguatges intermedis, que fan un primer pas de compilaci\u00f3, el resutat del qual s\u00f3n unes instruccions que permet ser executades per un int\u00e8rpret. El gran representant \u00e9s el llenguatje Java.</p> <p></p> <p></p>"},{"location":"Unitat_1.Introduccio_a_la_Programacio/teoria1_algorismes_i_llenguatges/#13-llenguatges-segons-el-seu-us","title":"1.3 Llenguatges segons el seu \u00fas","text":"<p>Depenent de la destinaci\u00f3 dels programes, hem d'escollir uns o altres llengutges de programaci\u00f3. Anem a veure una xicoteta classificaci\u00f3 de per a que podem fer servir cada llenguatge:</p> <ul> <li><code>C</code>: llenguatge molt potent. Hui en dia es fa servir per a programar sistemes operatius i microcontroladores, per \u00e9l seu acc\u00e9s a baix nivell. Tamb\u00e9 es fa servir per a programar llibreries que faran servir altres llenguatges com per exemple Python.</li> <li><code>Java</code>: llenguatge pensat per a la creaci\u00f3 de programes de prop\u00f2sit general, amb acc\u00e8s a bases de dades i servidors. Tamb\u00e9 permet la programaci\u00f3 de dispositius d'oci.</li> <li><code>Python</code>: llenguatge de prop\u00f2sit general, amb una gran col\u00b7lecci\u00f3 de llibreries que permeten desenvolupar programes de qualsevol naturalesa. Es fa servir molt per a IA, fent servir llibreries programades en C, com hem comentat abans.</li> <li><code>node/javascript</code>: llenguatge pensat per a la programaci\u00f3 de servidors r\u00e0pid i escalable. S'integra molt be amb els navegadors web.</li> <li><code>php</code>: llenguatge pensat per a la programaci\u00f3 de servidors.</li> <li><code>R</code>: llenguatge pensant per a l'an\u00e0lisi de dades i big data, aix\u00ed com representaci\u00f3 de la informaci\u00f3.</li> <li><code>Kotlin</code>: llenguatge que permet combinar i incloure codi Java. Actualment pensat pera desenvolupament en Android.</li> </ul>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/","title":"1. Preparaci\u00f3 de l'entorn","text":""},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#1-preparant-lentorn-en-python","title":"1. Preparant l'Entorn en Python","text":"<p>Abans de comen\u00e7ar a programar en Python hem de preparar la nostra m\u00e0quina per a tal tasca. Est\u00e0 clar que podem tenir un superordenador i instal\u00b7lar tot al complet, per\u00f2 al poc de temps ens adoanrem que perdrem el control del que tenim. Varies versions dels int\u00e8rprets de Python (2 o 3) i dins de la 3, 3.7, 3.9, etc... Adem\u00e9s tenim tota la col\u00b7lecci\u00f3 de llibreries que podem instal\u00b7lar amb pip per a fer-les servir al nostre programa. Espai i m\u00e9s espai.. versions i m\u00e9s versions.</p> <p>Per a evitar aquestes instal\u00b7lacions massives de incloure-ho tot, ens ajuden els gestors de depend\u00e8ncies, com els que ja coneixereu <code>Maven</code>, <code>Ant</code>, <code>Gradle</code> per a <code>Java</code>, per exemple el Node Package Manager de <code>node.js</code>. Els gestors de dependencies ens permeten crear una mena d'entorns a\u00efllats on podem indicar quines llibreries i depend\u00e8ncies ens calen per al nostre projecte. Aquestes llibreries no depenen del sistema anfitri\u00f3, i a m\u00e9s a m\u00e9s, permeten una exportaci\u00f3 f\u00e0cil, ja que no hem de copiar ni d'exportar les llibreries, ja que al dest\u00ed s'agafaran de nou.</p> <p>En resum, els entorns virtuals ens permeten:</p> <ul> <li>Organitzar i tindre millor controlades totes les llibreries</li> <li>Estabilitat, ja que sempre tenim la llibreria exacta del nostre entorn i no la de la m\u00e0quina real</li> <li>Version distintes</li> </ul> Atenci\u00f3 <p>Recomanem per tant, crear un entorn virtual per a cadascun dels projectes que desenvoluparem.</p>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#2-installacio-de-python-3","title":"2. Instal\u00b7laci\u00f3 de Python 3","text":""},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#21-installar-python-3","title":"2.1. Instal\u00b7lar Python 3","text":"WindowsmacOSLinux (Ubuntu/Debian) <ol> <li> <p>Ves a https://www.python.org/downloads/ i descarrega l'\u00faltima versi\u00f3 de Python 3.</p> </li> <li> <p>Durant la instal\u00b7laci\u00f3, assegura't de seleccionar l'opci\u00f3 \"Add Python to PATH\".</p> </li> <li> <p>Un vegada instal\u00b7lat, obre un terminal i comprova la versi\u00f3 amb:</p> </li> </ol> <pre><code>python --version\n</code></pre> <ol> <li>Si tens Homebrew:</li> </ol> <pre><code>brew install python\n</code></pre> <ol> <li>Comprova amb:</li> </ol> <pre><code>python3 --version\n</code></pre> <pre><code>sudo apt update\nsudo apt install python3 python3-venv python3-pip\npython3 --version\n</code></pre>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#22-introduccio-a-venv-creacio-dentorns-virtuals-a-python","title":"2.2. Introducci\u00f3 a venv: Creaci\u00f3 d'entorns virtuals a Python","text":""},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#221-que-es-un-entorn-virtual","title":"2.2.1. Qu\u00e8 \u00e9s un entorn virtual?","text":"<p>Un entorn virtual \u00e9s una carpeta especial que cont\u00e9 una c\u00f2pia de Python i de totes les biblioteques que utilitzarem en un projecte. D'aquesta manera, mantenim els nostres projectes a\u00efllats, evitant problemes de compatibilitat entre versions de Python i biblioteques.</p>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#222-com-crear-un-entorn-virtual-amb-venv","title":"2.2.2. Com crear un entorn virtual amb venv","text":"<ol> <li>Crear l'entorn virtual:</li> </ol> <p>Navega fins a la carpeta del projecte i crea l'entorn virtual amb: </p> <p>Bash<pre><code>    python3 -m venv nom_entorn\n</code></pre> <code>nom_entorn</code> es el nom que donem a l'entorn (pots posar, per axemple, <code>.venv</code> o <code>env</code>).</p> <ol> <li>Activar l'entorn virtual:</li> </ol> WindowsmacOS/Linux Bash<pre><code>.\\nom_entorn\\Scripts\\activate\n</code></pre> Bash<pre><code>source nom_entorn/bin/activate\n</code></pre> <p>Quan l'entorn estigua actiu, veur\u00e0s el nom de l'entorn entre par\u00e8ntesis abans del teu prompt.</p> <ol> <li>Instalar paquets dins del entorn:</li> </ol> <p>Una vegada activat l'entorn, podem instal\u00b7lar paquets amb <code>pip</code>, aquets paquets nom\u00e9s s'instal\u00b7laran dins del entorn:</p> Bash<pre><code>pip install nom_del_paquet\n</code></pre> <ol> <li>Desactivar l'entorn virtual:</li> </ol> <p>Una vegada hem acabat, podem desactivar l'entorn amb:</p> Bash<pre><code>deactivate\n</code></pre>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#223-beneficis-dutilitzar-entorns-virtuals","title":"2.2.3. Beneficis d'utilitzar entorns virtuals:","text":"<ul> <li>Separar les depend\u00e8ncies entre projectes.</li> <li>Evitar problemes de compatibilitat entre versions de Python i paquets.</li> <li>Facilitar la reproducci\u00f3 d'entorns en altres m\u00e0quines.</li> </ul>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#224-exemple-practic","title":"2.2.4. Exemple pr\u00e0ctic:","text":"<ol> <li>Crear un projecte nou:     Bash<pre><code>mkdir projecte\ncd projecte\npython3 -m venv env\n</code></pre></li> <li>Activar l'entorn:     Bash<pre><code>source env/bin/activate  # O \\env\\Scripts\\activate a Windows\n</code></pre></li> <li>Instal\u00b7lar un paquet, com ara <code>requests</code>:    Bash<pre><code>pip install requests\n</code></pre></li> <li>Desactivar l'entorn quan acabem:     Bash<pre><code>deactivate\n</code></pre></li> </ol>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#3-jupyter-notebooks","title":"3. Jupyter notebooks","text":"<p>Els Jupyter Notebooks s\u00f3n una eina fonamental en el m\u00f3n de la programaci\u00f3 i la ci\u00e8ncia de dades que ha revolucionat la manera en qu\u00e8 els professionals treballen i col\u00b7laboren en l'an\u00e0lisi de dades, el desenvolupament de programari i la recerca cient\u00edfica. Aquesta plataforma, que es va originar com a derivaci\u00f3 del projecte <code>IPython</code>, ofereix un entorn interactiu que combina codi, text, imatges i gr\u00e0fics en un \u00fanic document web, permetent als usuaris crear i compartir continguts din\u00e0mics i ben documentats.</p> <p>Un dels elements m\u00e9s destacats dels Jupyter Notebooks \u00e9s la seva capacitat d'integrar codi executable (Python) amb text explicatiu (Markdown), la qual cosa facilita la creaci\u00f3 de documents que expliquen i demostren pas a pas els processos anal\u00edtics i els resultats obtinguts. Aquesta funcionalitat fa que sigui una eina ideal per a cient\u00edfics de dades, enginyers, estudiants i professionals que volen comunicar les seves idees i resultats de manera clara i efectiva.</p> <p>A m\u00e9s de ser utilitzats per a l'exploraci\u00f3 de dades i l'an\u00e0lisi estad\u00edstica, els Jupyter Notebooks tamb\u00e9 s\u00f3n \u00e0mpliament emprats en l'aprenentatge de programaci\u00f3 i la doc\u00e8ncia, ja que permeten als estudiants escriure, provar i comprendre el codi en un entorn interactiu i amigable.</p> <p>Per comen\u00e7ar a desenvolupar amb Jupyter Notebooks, haur\u00e0s d'instal\u00b7lar algunes eines i depend\u00e8ncies al teu sistema. Aqu\u00ed tens els passos b\u00e0sics per a la instal\u00b7laci\u00f3:</p> <ol> <li> <p>Python: Els Jupyter Notebooks s\u00f3n m\u00e9s comunsment utilitzats amb Python. Assegura't de tenir Python instal\u00b7lat al teu sistema. \u00c9s recomanable utilitzar Python 3, ja que Python 2 ja no rep suport.</p> </li> <li> <p>Gestor de paquets de Python: Si no ho tens ja instal\u00b7lat, \u00e9s aconsellable utilitzar un gestor de paquets de Python com <code>pip</code> o <code>conda</code>. Aquestes eines et permetran instal\u00b7lar i gestionar les llibreries i paquets necessaris.</p> </li> <li> <p>Jupyter Notebook: Pots instal\u00b7lar Jupyter Notebook executant la seg\u00fcent comanda a la terminal utilitzant <code>pip</code>:</p> </li> </ol> Bash<pre><code>pip install notebook\n</code></pre> <p>Si utilitzes l'entorn de conda, tamb\u00e9 pots instal\u00b7lar-lo amb:</p> Bash<pre><code>conda install notebook\n</code></pre> <p>Un vegada instal\u00b7lats tots els components, ja estem preparats per comen\u00e7ar a treballar amb Jupyter Notebooks. Pots iniciar un servidor de Jupyter Notebook amb la ordre:</p> Bash<pre><code>jupyter notebook\n</code></pre> <p>Aquesta ordre obrir\u00e0 el teu navegador web amb l'entorn de Jupyter Notebook, on podr\u00e0s crear nous fitxers de notebook, obrir-ne de existents i comen\u00e7ar a escriure codi i text interactius.</p> <p>Recorda que potser tamb\u00e9 voldr\u00e0s utilitzar un entorn virtual (com virtualenv o conda) per gestionar les depend\u00e8ncies i els paquets espec\u00edfics del teu projecte, especialment si treballes en diversos projectes amb versions diferents de les llibreries.</p>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#4-jupyter-i-visual-studio-code","title":"4. Jupyter i Visual Studio Code","text":"<p>Si prefereixes utilitzar Visual Studio Code (VS Code) per desenvolupar amb Jupyter Notebooks, tamb\u00e9 pots fer-ho. VS Code \u00e9s una excel\u00b7lent opci\u00f3 per als desenvolupadors de Python i ofereix una integraci\u00f3 nativa amb Jupyter que facilita la creaci\u00f3 i l'execuci\u00f3 de notebooks. Aqu\u00ed tens com fer-ho:</p> <ol> <li> <p>Instal\u00b7la Visual Studio Code: Si encara no tens VS Code instal\u00b7lat, descarrega'l i instal\u00b7la'l des del lloc web oficial.</p> </li> <li> <p>Instal\u00b7la l'extensi\u00f3 de Jupyter: Una vegada obert VS Code, ves a l'Explorador d'Extensions (Extensions Marketplace) fent clic a l'\u00edcona d'extensions a la barra lateral esquerra o amb <code>Ctrl+Shift+X</code>. Cerca \"Jupyter\" i instal\u00b7la l'extensi\u00f3 \"Python\" que ofereix Microsoft. Aquesta extensi\u00f3 proporciona suport complet per als Jupyter Notebooks.</p> </li> <li> <p>Crea o obre un Jupyter Notebook: Des de VS Code, pots crear un nou Jupyter Notebook fent clic a l'opci\u00f3 \"Create new Jupyter Notebook\" a la vista d'Explorer. Tamb\u00e9 pots obrir notebooks existents fent clic amb el bot\u00f3 dret sobre ells i seleccionant \"Open with Jupyter Notebook.\"</p> </li> <li> <p>Selecciona l'entorn de Python: VS Code permet gestionar entorns virtuals amb l'extensi\u00f3 \"Python\" i pots seleccionar l'entorn que vulguis utilitzar per al teu notebook.</p> </li> <li> <p>Desenvolupa amb Jupyter Notebooks: Un cop hagis creat o obert un notebook, podr\u00e0s escriure codi, text i afegir cel\u00b7les de manera similar a com ho faries amb l'entorn de Jupyter Notebook independent. Pots executar les cel\u00b7les mitjan\u00e7ant les opcions a la barra d'eines o amb atajos de teclat.</p> </li> <li> <p>Gestiona les extensions: VS Code ofereix moltes extensions \u00fatils per a la ci\u00e8ncia de dades i l'an\u00e0lisi de dades. Pots explorar i instal\u00b7lar extensions addicionals des de l'Explorador d'Extensions.</p> </li> </ol> <p>Aquesta integraci\u00f3 de Jupyter a Visual Studio Code ofereix una experi\u00e8ncia de desenvolupament completa i molt potent per als usuaris de Python que vulguin treballar amb notebooks i codi en un mateix entorn.</p>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#5-google-colab","title":"5. Google Colab","text":"<p>Google Colab (abreviaci\u00f3 de Colaboratory) \u00e9s una plataforma en l\u00ednia que permet executar Jupyter Notebooks directament al n\u00favol, sense necessitat de configurar res al teu propi sistema. \u00c9s una excel\u00b7lent opci\u00f3 si vols treballar amb Jupyter Notebooks sense preocupar-te de la instal\u00b7laci\u00f3 d'entorns i llibreries al teu propi dispositiu. Aqu\u00ed tens com fer servir Google Colab:</p> <ol> <li> <p>Accedeix a Google Colab: Obre el teu navegador web i accedeix a Google Colab. Haur\u00e0s d'iniciar sessi\u00f3 amb el teu compte de Google si encara no ho has fet.</p> </li> <li> <p>Crea un nou notebook o importa-ne un: Pots crear un nou notebook fent clic a \"File\" &gt; \"New notebook\" o importar un notebook existent des del teu Google Drive o des d'un enlla\u00e7 a GitHub fent servir les opcions disponibles a la vista \"File\".</p> </li> <li> <p>Treballa amb el teu notebook: Un vegada has creat o importat un notebook, pots escriure codi, text, i executar cel\u00b7les com ho faries amb un Jupyter Notebook convencional. Utilitza les cel\u00b7les de codi i text per a la teva an\u00e0lisi o projecte.</p> </li> <li> <p>Entorns i llibreries: Google Colab ofereix un entorn de Python pr\u00e8viament configurat que inclou moltes llibreries comunes per a la ci\u00e8ncia de dades (com NumPy, pandas, Matplotlib, etc.). Si necessites instal\u00b7lar altres llibreries, pots fer-ho executant comandes pip directament en una cel\u00b7la (per exemple, <code>!pip install numpy</code>).</p> </li> <li> <p>Guarda el teu treball: Pots desar el teu notebook a Google Drive o descarregar-lo localment mitjan\u00e7ant l'opci\u00f3 \"File\" &gt; \"Save\" o \"File\" &gt; \"Download .ipynb.\"</p> </li> <li> <p>Comparteix i col\u00b7labora: Google Colab et permet compartir els teus notebooks amb altres persones perqu\u00e8 puguin veure i editar el teu treball en temps real. Pots compartir mitjan\u00e7ant enlla\u00e7os o afegir col\u00b7laboradors directament a trav\u00e9s de les opcions de compartici\u00f3.</p> </li> </ol> <p>Google Colab \u00e9s una eina excel\u00b7lent per als projectes de ci\u00e8ncia de dades i l'aprenentatge autom\u00e0tic que es volen executar en un entorn de computaci\u00f3 m\u00e9s potent que el teu dispositiu local o per a la col\u00b7laboraci\u00f3 en l\u00ednia amb altres persones. \u00c9s una opci\u00f3 molt popular a la comunitat de la ci\u00e8ncia de dades i \u00e9s gratu\u00eft per a \u00fas personal.</p>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#6-estructura-dun-programa-en-python","title":"6. Estructura d\u2019un programa en Python","text":"<p>Un programa en Python te una estructura molt simple, si ho comparm en altres llenguatges de programaci\u00f3; simplement hem d'escriure les nostres linies de codi i ja est\u00e0, per\u00f2 pot tenir m\u00e9s coses</p> <p>Qualsevol programa escrit en Python t\u00e9 la seg\u00fcent estructura: </p> Estructura<pre><code>[Descripci\u00f3 del programa]\n[Directives]\n[Importaci\u00f3 de Libreria]\n[Definici\u00f3 de classes]\n[Funcions]\nEntrada de dades\nProcessament de dades\nSortidad de dades\n</code></pre> <p>Els claud\u00e0tors indiquen que eixos apartats s\u00f3n opcionals. Per tant, veiem que l\u2019\u00fanica part necess\u00e0ria en un programa \u00e9s l'entrada, el processament i la sortida de dades, com en qualssevol algorisme. Notar que en Python tots aquests poden canviar la posici\u00f3. Vejam uns exemples i els analitzem.</p> <p>El m\u00e9s simple, mostra un missatge per pantalla:</p> Python<pre><code>print(\"Hola m\u00f3n\")\n</code></pre> <p>Altre una mica m\u00e9s complet:</p> Python<pre><code>import time\n\ndef areaRectangle(base,altura):\n    return base*altura\n\nbase=int(input(\"Dis-me la base del rectangle: \"))\naltura=int(input(\"Dis-me l'altura del rectangle: \"))\ntime.sleep(2)   # Espera dos segons\n\narea=areaRectangle(base,altura)\n\nprint(\"L'area del rectangle \u00e9s \" + str(area))\n</code></pre> <p>Comentaris:</p> <ul> <li>Les 3 primeres l\u00ednies sob una descripci\u00f3 del que fa el programa. Son comentaris, que no s'executen</li> <li>Al <code>import</code> indiquem que necessitem una llibreria. Aix\u00f2 es veur\u00e0 m\u00e9s endavant, per\u00f2 les llibreries s\u00f3n un conjunt de funcions que ja venen implementades i les podem fer servir als nostres programes. La funci\u00f3 que farem servir \u00e9s <code>time.sleep()</code> que fa que el programa es pause durant una quantitat de segons.</li> <li>Despr\u00e8s tenin la definici\u00f3 d'una funci\u00f3, que comen\u00e7a amb la paraula reservada <code>def</code>. Notar que tot el que pertany a la funci\u00f3 est\u00e0 indentat una tabulaci\u00f3 (al nostre cas sols la instrucci\u00f3 del <code>return</code>).</li> <li>Despr\u00e8s ja tenim el nostre programa pr\u00f2piament dit:<ul> <li>Les l\u00ednies no tenen cap indentaci\u00f3 (pegades a l'esquerre)</li> <li>La primera part \u00e9s la que l'algorisme ha d'aconseguir la informaci\u00f3. En aquest cas a preguntem a l'usuari mitjan\u00e7ant input.</li> <li>La segona part \u00e9s el fer el c\u00e0lcul. Pot veure's que es crida a la funci\u00f3 que hem definit anteriorment</li> <li>Finalment mostrem a l'usuari el resultat (print).</li> </ul> </li> </ul>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#7-noms-i-paraules-reservades-en-python","title":"7. Noms i paraules reservades en Python","text":"<p>Nosaltres per a programar, com hem vist abans, li hem posat nom a les variables i funcions. Per a posar nom a les variables hem de complir unes regles, que tenen tots els llenguatges de programaci\u00f3:</p> <ol> <li>S\u00f3n una combinaci\u00f3 de lletres min\u00fascules [a..z], maj\u00fascules [A..Z], d\u00edgits [0..9] i el car\u00e0cter subratllat[_].</li> <li>No poden comen\u00e7ar amb d\u00edgit.</li> <li>Poden contenir accents i altes car\u00e0cters (\u00f1,\u00e7,...)</li> <li>No poden ser paraules reservades o keywords del sistema (veure taula a continuaci\u00f3)</li> <li>No poden haver s\u00edmbols especials ni operadors [!, @, #, $, %, ...] etc.</li> <li>Poden tenir qualsevol longitud</li> </ol> <p>Paraules reservades:</p> False class finally is return None continue for lambda try True def from nonlocal while and del global not with as elif if or yield assert else import pass break except in raise <p>Existeixen algunes m\u00e9s, com els tipus de dades (int, float, str, complex, etc). La facilitat \u00e9s que els editors ens colorejen les paraules reservades, llavors sabrem que no les podem utilitzar per als nostres identificadors.</p> <p>Les variables s\u00f3n els llocs on es guarda la informaci\u00f3. Poden ser de distints tipus, segons el lloc on es fan servir i des d'on es poden accedir. Una primera distinci\u00f3 \u00e9s entre globals i locals:</p> <ul> <li>Les globals s\u00f3n aquelles que es creen fora de qualssevol funci\u00f3 i, per tant, s\u00f3n accessibles des de qualsevol punt del fitxer o programa.</li> <li>Les locals s\u00f3n les que es creen dins d\u2019alguna funci\u00f3 i, per tant, nom\u00e9s s\u00f3n accessibles des de les instruccions de dins d\u2019eixa funci\u00f3. Dins de una funci\u00f3 es pot accedir a les variables locals seues, aix\u00ed com a les variables globals</li> <li>Les variables de classe s\u00f3n com les variables locals a les funcions. S'estudiar\u00e0n dins de la POO</li> </ul>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#8-comentaris","title":"8. Comentaris","text":"<p>Els comentaris, com ja s'ha dit abans, s\u00f3n sent\u00e8ncies les quals no s'executen, per\u00f2 serveixen per a poder entrendre i recordar qu\u00e8 voliem fer dins del nostre codi. Si escrivim un codi, i el tornem a revisar al cap d'unes setmanes, segur que no recordem certes coses. L'\u00fas de comentaris ens ajudar\u00e0 a recordar.</p> <p>Tamb\u00e9 servieix quan altre programador ens revisa el nostre codi poder entrendre el que voliem fer.</p>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#81-tipus-de-comentaris","title":"8.1. Tipus de comentaris","text":"<ul> <li>D'una l\u00ednia, venen precedits pel car\u00e0cter coixinet #</li> <li>De m\u00e9s d'una l\u00ednia, quan tanquem diverses l\u00ednies entre dos parelles de tres cometes simples '''</li> <li>De documentaci\u00f3 docstring, s\u00f3n una l\u00ednia o l\u00ednies de text intercalades al principi d'un m\u00f2dul, m\u00e8tode, classe o funci\u00f3. Pot ser:<ul> <li>L\u00ednia simple: com per exemple <code>'Documentaci\u00f3.'</code></li> <li>L\u00ednia m\u00faltiple: tancada entre tres parelles de cometes dobles <code>\"\"\"</code></li> </ul> </li> </ul> Python<pre><code>import time\n# declarem una funci\u00f3\ndef areaRectangle(base,altura):\n    \"\"\"\n    Aquest funci\u00f3 calcula el \u00e0rea d'un rectangle\n    Par\u00e0metres:\n        base -&gt; La base del rectangle\n        altura -&gt; La altura del rectangel\n    Errors: \n        No implentat\n    \"\"\"\n    return base*altura\n\ndef areaQuadrat(base):\n    'Calcula el area  de un quadrat de costat pasat.'\n    return base**2\n\n#demanem les dades a l'usuari\nbase=int(input(\"Dis-me la base del rectangle: \"))\naltura=int(input(\"Dis-me l'altura del rectangle: \"))\ntime.sleep(2)   # Espera dos segons\n\narea=areaRectangle(base,altura)\n#mostrem el resultat\nprint(\"L'area del rectangle \u00e9s \" + str(area))\n\narea=areaQuadrat(base)\n#mostrem el resultat\nprint(\"L'area del quadrat \u00e9s \" + str(area))\n</code></pre>"},{"location":"Unitat_2_Python/01_Preparacio_Entorn/teoria/#9-delimitadors","title":"9. Delimitadors","text":"<p>S\u00f3n s\u00edmbols especials que permeten al compilador separar i recon\u00e9ixer les diferents unitats sint\u00e0ctiques del llenguatge. En molts llenguatges de programaci\u00f3 es fa servir un <code>;</code> (C i en Java ) com a finalitzador, per\u00f2 <code>Python</code> fa servir el bot de l\u00ednia. De tota manera indiquem els m\u00e9s habituals per a tots els llenguatges.</p> DELIMITADOR NOM UTILITAT , Separador Separar els elements d\u2019una llista ( ) Par\u00e8ntesis Agrupar operacions i per als par\u00e0metres de les funcions [ ] Claud\u00e0tors Per als vectors, llistes i dem\u00e9s"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/","title":"2. Tipus de Dades. Operadors","text":""},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#21-tipus-de-dades","title":"2.1 Tipus de dades","text":"<p>Els tipus de dades s\u00f3n els distints tipus d'informaci\u00f3 que podem guardar a les nostres variables. Han anat evolucionant al llarg del temps, i cada vegada accepten valors m\u00e9s grans degut a les pot\u00e8ncies i capacitats cada cop m\u00e9s grans dels ordenadors.</p>"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#211-tipus-elementals","title":"2.1.1 Tipus elementals","text":"<p>Partirem de la taula de tipus que s'aplica en C i en Java, que estan molt m\u00e9s detallats.</p> TIPUS SIGNIFICAT BYTES RANG DE VALORS str Cadena de car\u00e0cters 4 per car\u00e0cter en UTF-8 Segons codificaci\u00f3 int Enter 2 o 4 [-2\u00b9\u2075 . . 2\u00b9\u2075] boolean L\u00f2gic 1 bit True o False float Real simple precisi\u00f3 4 [-3,438 . . 3,438] double Real doble precisi\u00f3 8 [1,7308 . . 1,7308] void o null (cap valor) 0 - <p>El tipus void/null serveix per a representar l\u2019abs\u00e8ncia de valor, com per exemple en funcions que no retornen cap valor o quan no sabem alguna informaci\u00f3. Imaginem que tenim una variable entera temperatura, de la qual no sabem el valor. No podem dir que la temperatura \u00e9s zero, ja que podriem pensar que si l'hem medit (i evidentment fa fret).</p>"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#211-integer-o-int","title":"2.1.1. integer o int","text":"<p>Serveix per a representar nombres enters (sense decimals) amb signe. El tamany est\u00e0 limitat a la mem\u00f2ria del dispositiu. Per defecte el n\u00famero enter es representa en el sistema decimal, per\u00f2 podem representar-lo en binari, octal i hexadecimal, afegint al principi del numero el prefix de la base en la qual ho representem:</p> Representacions de nombres enters, Python<pre><code>print(11)     # mostra 11\nprint(0o11)   # mostra 9\nprint(0x11)   # mostra 17\nprint(0b11)   # mostra 3\n</code></pre> Prefixe Significat Base 0b o 0B Binari 2 0o o 0O Octal 8 0x o 0X Hexadecimal 16 <p>Adonar-se que l'ordre de sortida print ho mostra sempre en decimal.</p>"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#212-float","title":"2.1.2 float","text":"<p>Serveix per a representar els numeros reals en notaci\u00f3 de coma deximal. Podem representar tamb\u00e9 en notaci\u00f3 cient\u00edfica afegint una <code>E</code> seguit d'un enter positiu o negatiu</p> Reals, Python<pre><code>&gt;&gt;&gt; 4.27\n4.27\n&gt;&gt;&gt; type(4.27)\n&lt;class 'float'&gt;\n&gt;&gt;&gt; 4.\n4.0\n&gt;&gt;&gt; .27\n0.27\n&gt;&gt;&gt; .4e7\n4000000.0\n&gt;&gt;&gt; 4.2e-4\n0.00042\n</code></pre> <p>Els n\u00fameros reals est\u00e0n acotats:</p> <ul> <li>Els numeros m\u00e9s grans, positiu i negatiu: 1.79e308 i -1.79e308</li> <li>Els n\u00fameros m\u00e9s xicotets, positiu i negatiu: 5e-324 i -5e-324</li> </ul> <p>NOTA: Python tamb\u00e9 supporta els n\u00fameros complexes, que els veurem al llarg del curs</p> <p>Modificadors dels tipus elementals</p> <p>Servixen per a alterar els rangs dels tipus elementals vistos anteriorment. Existixen 2 tipus de modificadors:</p> <ul> <li>Modificadors de longitud:<ul> <li><code>short</code> \u2192 per a enters (opci\u00f3 per defecte en alguns compiladors)</li> <li><code>long</code> \u2192 per a enters i reals. Dobla el rang</li> </ul> </li> <li>Modificadors de signe (per a enters):<ul> <li><code>signed</code> \u2192 amb signe (opci\u00f3 per defecte)</li> <li><code>unsigned</code> \u2192 sense signe</li> </ul> </li> </ul> <p>Els valors m\u00e0xims i m\u00ednims de cada tipus estan definits en les llibreries de cada llenguatge, i canvia segons els compiladors.</p> <p>En <code>Python</code> hi han menys tipus, per\u00f2 tot i aix\u00f2 no perdrem res de pot\u00e8ncia, donat que, per exemple els l\u00edmits a partir de <code>Python3</code> no tenen topes</p>"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#213-bool","title":"2.1.3 bool","text":"<p>Els valors l\u00f2gis vertader i fals, especificats per <code>True</code> i <code>False</code>.</p> Python<pre><code>&gt;&gt;&gt; type(True)\n&lt;class 'bool'&gt;\n&gt;&gt;&gt; type(False)\n&lt;class 'bool'&gt;\n</code></pre>"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#214-string-o-str","title":"2.1.4 string o str","text":"<p>El tipus <code>string</code> no existeix al llenguatge <code>C</code>, i es veu com una successi\u00f3 de car\u00e0cters. En <code>Java</code> ja va apareixer com a objecte i en <code>Python</code> ja \u00e9s un tipus b\u00e0sic. Un <code>string</code> \u00e9s una successi\u00f3 de 0 o m\u00e9s car\u00e0cters dins de cometes simples o dobles. Aquestes cometes no poden apareixer dins de la cadena, ja que la primera obri i l'\u00faltima tanca:</p> Python<pre><code>&gt;&gt;&gt;print(\"Soc una cadena.\")\nSoc una cadena.\n&gt;&gt;&gt;print(\"Soc una \"cadena.\")\nSyntaxError: invalid syntax\n</code></pre> <p>Posibles solucions:</p> <ul> <li>Intercanviar cometes dobles per simples, segons necessitats</li> <li>Fer servir el caracter contrabarra <code>\\</code> que anula el significat dels simbols especials. Aquest car\u00e0cter es llig caracter de escape o d'escapament</li> <li>Fer servir com a inici de la cadena la cometa simple <code>'</code> i dins ja podem fer servir la cometa doble o vicerversa.</li> </ul> Python<pre><code>&gt;&gt;&gt;print('Soc una \"cadena.')\nSoc una \"cadena.\n&gt;&gt;&gt;print(\"Soc una \\\"cadena.\")\nSoc una \"cadena.\n&gt;&gt;&gt;print(\"Soc una 'cadena.\")\nSoc una 'cadena.\n</code></pre> <p>Aquest car\u00e0cter t\u00e9 molts usos tamb\u00e9, ja que de vegades combinat amb altres car\u00e0cters podem aconseguir car\u00e0cter no imprimibles o de control:</p> Seq\u00fc\u00e8ncia de Escape Significat <code>\\a</code> Alert. S'emet un pitit de l'altaveu <code>\\b</code> Backspace. S'esborra un car\u00e0cter <code>\\n</code> Line Feed. S'avan\u00e7a una l\u00ednia <code>\\r</code> Carriage Return. Es torna el cursor al principi <code>\\t</code> Tabulador. S'avan\u00e7a Python<pre><code>print(\"Exemple 1\")\nprint(\"Hola\",end='')\nprint(\"\\t\",end='')\nprint(\"Adeu\")\n\nprint(\"Exemple 2\")\nprint(\"Hola\",end='')\nprint(\"\\b\",end='')\nprint(\"Adeu\")\n\nprint(\"Exemple 3\")\nprint(\"Hola\",end='')\nprint(\"\\r\",end='')\nprint(\"Adeu\")\n\nprint(\"Exemple 4\")\nprint(\"Hola\",end='')\nprint(\"\\n\",end='')\nprint(\"Adeu\")\n\nprint(\"Exemple 5\")\nprint(\"Hola\",end='')\nprint(\"\\f\",end='')\nprint(\"Adeu\")\n</code></pre> Python<pre><code>Exemple 1   \nHola    Adeu    \nExemple 2 \nHolAdeu\nExemple 3\nAdeu                                                                  \nExemple 4\nHola\nAdeu  \nExemple 5                                                            \nHola         \n    Adeu\n</code></pre>"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#22-tipus-compostos","title":"2.2 Tipus compostos","text":"<p>Els tipus simples serveixen quan tenim que guardar una informaci\u00f3 simple, \u00e9s a dir formada per una s\u00f3la dada. Exemple s\u00f3n una temperatura, un nom, una edat, etc. La cosa ja canvia quan tenim que guardar una informaci\u00f3 formada per varies dades, com per exemple una data de naixement. Com \u00e9s evident, aquesta informaci\u00f3 est\u00e0 formada per 3 informacions simples (dia, mes i any). Altre exemple seria una adre\u00e7a, formada per tipus de carrer, nom del mateix, n\u00famero, escala, codi postal, etc.</p> <p>Aquest tipus de dades s'estudiaran m\u00e9s endavant, i s\u00f3n tipus que els definirem els programadors, prenent com a base els b\u00e0sics que hem vist anteriorment.</p>"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#23-declaracio-de-variables","title":"2.3 Declaraci\u00f3 de variables","text":"<p>Una variable \u00e9s una porci\u00f3 de mem\u00f2ria (RAM), representada per un nom (identificador) on es guardar\u00e0 un valor que pot variar al llarg de l\u2019execuci\u00f3 d\u2019un programa. Els llenguatges de programaci\u00f3, depenent de com es declaren les variables poden ser de tipat fort o din\u00e0mic. Anem a veure-ho i veurem exemples.</p> <p>Els llenguatges fortament tipat obliguen de indicar la variable de quin tipus ser\u00e0 abans de fer-la servir. Exemples d'aquest llenguatges s\u00f3n C i Java. Despr\u00e8s al moment de fer servir les variables els llenguatges vigilen i controlen que el valor que s'emmagatzema correspon al tipus de la variable. Cas de no correspondre donar\u00e0 error.</p> Llenguatge fortament tipat Java<pre><code>int n;      // diguem que n \u00e9s enter\nfloat x;    // diguem que x \u00e9s real\n\nn=10;         // OK\nn=\"hola\";     // ERROR\nx=5.47;       // OK\nx=7;          // conversi\u00f3:  x valdr\u00e0 7.0\n\nn=4.56        // semierror:  n valdr\u00e0 4, es perd la part real\n</code></pre> <p>El tipat de Python es coneix tamb\u00e9 com a Duck typing</p>"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#24-ambit-i-visibilitat","title":"2.4 \u00c0mbit i visibilitat","text":"<p>Les variables (i constants) poden definir-se/declarar-se en qualsevol part del programa, per\u00f2 segons el lloc on siguen declarades, les podrem fer servir en tot el programa (globals) o nom\u00e9s en alguna part (locals).</p> <ul> <li>La visibilitat \u00e9s la propietat que indica si es pot accedir o no a una variable en un punt determinat del programa.</li> <li>L\u2019\u00e0mbit \u00e9s la zona del programa on \u00e9s visible una variable.</li> </ul> <p>A partir d\u2019estos conceptes podem diferenciar entre objectes locals i globals:</p> <ul> <li>Objectes locals: Variables (o constants) declarades dins d\u2019un bloc o funci\u00f3 i, per tant, visibles nom\u00e9s en l\u2019\u00e0mbit d\u2019eixe bloc i dins dels seus sub-blocs.</li> <li>Objectes globals: Variables (o constants) declarades al programa principal (fora del main) i, per tant, visibles des de qualsevol lloc del programa.</li> </ul> <p>Tenir en compte que:</p> <ul> <li>En C i Java anomenem bloc a tot all\u00f2 que est\u00e0 entre claus { }. Per tant, qualsevol funci\u00f3, com veurem m\u00e9s endavant, \u00e9s un bloc.</li> <li>En Python un bloc s\u00f3n totes aquelles instruccions que estan al mateix nivell d'indentaci\u00f3, mitjan\u00e7ant tabulacions.</li> </ul> <p>Cal tindre clar que si es declaren variables en un bloc (locals) oculten les variables amb el mateix nom globals.</p> <p>Aquests conceptes s'estudiaran m\u00e9s endavant, quan treballem en la programaci\u00f3 modular</p>"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#25-operadors-i-expressions","title":"2.5 Operadors i Expressions","text":"<p>Per tancar aquest tema anem a estudiar els operadors que disposem als nostres llenguatges, aix\u00ed com la manera d'interactuar amb l'usuari per a demanar-li dades i mostrar-li els resultats. Mitjan\u00e7ant els operadors podrem construir expressions complexes per a formar els nostres algorismes.</p>"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#251-operadors-aritmetics","title":"2.5.1 Operadors aritm\u00e8tics","text":"<p>Anem a veure els operadors dels llenguatges de programaci\u00f3. La majoria s\u00f3n similars que Java o altres llenguatges, per\u00f2 hi han xicotetes difer\u00e8ncies:</p> Significat Python Java Exemple Pot\u00e8ncia ** no hi ha 3**2 retorna 9 Producte * * 3*6 retorna 18 Divisi\u00f3 / / 10/2 retorna 5 11/2 retorna 5.5 en Python 11/2 retorna 5 en Java (divisi\u00f3 entera) Divisi\u00f3 entera // (Python) 11/2 retorna 5 Residu % % 12/5 retorna 2 (residu de la divisi\u00f3 entera) Suma + + 12 + 7 retorna 19 Resta - - 12 - 7 retorna 5 <p>No cal gaire explicaci\u00f3, donat que son els operadors matem\u00e0tics de sempre. Tindre especial cura en la divisi\u00f3 entera.</p>"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#252-operadors-relacionals","title":"2.5.2 Operadors relacionals","text":"<p>Servixen per a comparar 2 expressions, retornant un valor l\u00f2gic: vertader o fals. Son els mateixos en Python i en Java:</p> Operador Significat <code>&lt;</code> Menor <code>&gt;</code> Major <code>==</code> Igual <code>!=</code> o <code>&lt;&gt;</code> (sols Python) Distint <code>&lt;=</code> Menor o igual <code>&gt;=</code> Major o igual"},{"location":"Unitat_2_Python/02_Tipus_Variables_Operadors/teoria/#253-operadors-logics","title":"2.5.3 Operadors l\u00f2gics","text":"<p>Els operadors l\u00f2gics s\u00f3n els de la taula seg\u00fcent. Serveixen per a composar distintes expressions l\u00f2giques:</p> Python Java Significat <code>or</code> <code>||</code> El OR l\u00f2gic <code>and</code> <code>&amp;&amp;</code> La AND l\u00f2gica <code>not</code> <code>!</code> El NOT l\u00f2gic Ejemplo Python<pre><code>&gt;&gt;&gt; a = True\n&gt;&gt;&gt; b = False\n&gt;&gt;&gt; a and b\nFalse\n&gt;&gt;&gt; a or b\nTrue\n&gt;&gt;&gt; not a\nFalse\n</code></pre> <p>Curtcircuit d\u2019expressions</p> <p>Si recordem les taules de veritat de les expressions l\u00f2giques, podem afirmar que:</p> <ul> <li><code>false AND ... \u2192 false</code>: false and els que siga sempre \u00e9s false</li> <li><code>true OR ... \u2192 true</code>: true or el que siga sempre \u00e9s true</li> </ul> <p>Per tant, com les expressions s\u2019avaluen d\u2019esquerra a dreta, en el moment en qu\u00e8 puga assegurar el valor final de l\u2019expressi\u00f3 l\u00f2gica (true o false), parar\u00e0 d\u2019avaluar-la. Esta manera de treballar s\u2019anomena curtcircuit d\u2019expressions. Aix\u00f2 ens d\u00f3na un benefici pel que fa a control d\u2019errors i a velocitat d\u2019execuci\u00f3.</p> <p>Exemples:</p> Java<pre><code>if ( (dto_1&gt;0) || (dto_2&gt;0) || (dto_3&gt;0) )\n    printf(\"S\u2019ha aplicat algun descompte\");\n</code></pre> <p>Si el <code>dto_1</code> \u00e9s major que 0, ja no es comproven les altres 2 expressions i passa a executar-se directament el <code>print</code>.</p> Python<pre><code>(x&lt;0) and print(\"El valor de la variable x \u00e9s negatiu\")\n</code></pre> <p>Nom\u00e9s es far\u00e0 el printf si el valor de x \u00e9s negatiu.</p> Exercici resolt Pensa qu\u00e8 passaria en cada cas sense i amb curtcircuit d\u2019expressions. Python<pre><code># Versi\u00f3 1\nx=10\ny=0\nif ((x/y)&gt;2 and (y!=0)):\npass\n\n# Versi\u00f3 2\nx=10;\ny=0;\nif ((y!=0) and (x/y)&gt;2):\npass\n</code></pre> Soluci\u00f3 <p>A la versi\u00f3 1: Python<pre><code>if ((x/y)&gt;2 and (y!=0)):         \nZeroDivisionError: division by zero\n</code></pre> A la versi\u00f3 2 cap error</p> <p>NOTA: l'ordre pass es fa servir quan volem deixar en blanc algun bloc de codi, com \u00e9s el cas que sols volem provar les condicions</p>"}]}